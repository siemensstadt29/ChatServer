Sonia Grozdanova 339720 sgrozdanova13@gmail.com
Stefan Gierke 332180 stefan_gierke@web.de

Antworten zu Aufgabe 1.3:

a) Ja, da mittels der Methode readLine() die Eingabe des Clients zeilenweise gelesen wird. 

Allerdings dürfen sich in den von den Clients abgeschickten Nachrichten keine Zeilenumbrüche 

befinden, da ansonsten eine korrekte Nachrichtenrückgabe an die einzelnen Clients nicht 

gewährleistet werden kann. Beim byteweisen Einlesen - etwa mithilfe der Methode read() - ist 

die Wahrscheinlichkeit sehr hoch, dass vollkommener Buchstabensalat an die Clients 

zurückgesendet würde, weil die Nachrichten beider Clients völlig ungeordnet vom Server gelesen 

werden. Insbesondere bei der Verwendung von lock()

b) Da Java aufgrund seines Bytecodes sowie der JVM plattformunabhängig und portabel ist und 

für alle gängigen Betriebssysteme existiert, spielt es keine Rolle, ob der erste Client auf 

Windows, der zweite auf einem Betriebssystem mit Linux-Kernel und der dritte auf Mac OS 

gestartet wird. Allerdings kann es vorkommen, dass sehr alte Java SE-Versionen die in der 

Client-Implementierung verwendeten Klassenbibliotheken nicht kennen.

c) Beim SIGSTOP-Befehl auf einem Linux-System wird nur die Verbindung zu dem blockierten 

Client unterbrochen, sodass der Server die Daten weiterhin an die anderen Clients senden kann. 

Die Liste mit den verbundenen Clients bleibt dabei jedoch unangetastet. Da sich bei Windows 

kein äquivalenter Befehl findet, muss auf TASKKILL zurückgegriffen werden, der den Prozess 

komplett beendet. Auch dies ist kein Problem, da aufgrund des nun geschlossenen Sockets 

lediglich eine SocketException ausgelöst wird, das Senden weiterer Nachrichten durch die 

verbliebenen Clients aber weiterhin problemlos funktioniert.

Darüber hinaus gibt es eine kritische Situation, wenn einer der angemeldeten Clients eine sehr 

langsame Verbindung hat, sodass beim Zurücksenden der Nachricht an alle Clients durch den 

Server immer auf den langsamen Client gewartet werden muss, bis dieser die Nachricht erhalten 

hat. Hier bietet sich die Variante an, einen Timeout einzubauen, der den Client bei Ablauf 

einfach ignoriert und ihn nach mehreren erfolglosen Sendeversuchen aus der Liste entfernt. Oder man schickt alle Nachrichten in eine Queue und richtet einen zusätzlichen Thread für den langsamen Client ein, der die Nachrichten dann gemäß seiner Geschwindigkeit aus der Queue ausliest.
